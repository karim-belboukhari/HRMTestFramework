{"name": "test_addcandidate[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=128.0.6613.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF69E0BB632+29090]\n\t(No symbol) [0x00007FF69E02E6E9]\n\t(No symbol) [0x00007FF69DEEB1CA]\n\t(No symbol) [0x00007FF69DEBFAF5]\n\t(No symbol) [0x00007FF69DF6E2E7]\n\t(No symbol) [0x00007FF69DF85EE1]\n\t(No symbol) [0x00007FF69DF66493]\n\t(No symbol) [0x00007FF69DF309B1]\n\t(No symbol) [0x00007FF69DF31B11]\n\tGetHandleVerifier [0x00007FF69E3D883D+3294125]\n\tGetHandleVerifier [0x00007FF69E424423+3604371]\n\tGetHandleVerifier [0x00007FF69E41A2E7+3563095]\n\tGetHandleVerifier [0x00007FF69E176F16+797318]\n\t(No symbol) [0x00007FF69E03986F]\n\t(No symbol) [0x00007FF69E035454]\n\t(No symbol) [0x00007FF69E0355E0]\n\t(No symbol) [0x00007FF69E024A7F]\n\t(No symbol) [0x00007FFAF5027374]\n\tRtlUserThreadStart [0x00007FFAF5CBCC91+33]", "trace": "self = <tests.test_add_candidate.Test_Add_Candidate object at 0x0000021E3B3ABFE0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f9f497b55ccdeabb09f7fcc75742e5ae\")>\n\n    @pytest.mark.Sanity\n    def test_addcandidate(self, setup):\n        self.loggin.info(\"***********************test_addcandidate started**********************\")\n        driver = setup\n        Lp = Login(driver)\n>       Lp.set_username(self.email)\n\ntests\\test_add_candidate.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_page.py:21: in set_username\n    element = self.driver.find_element(By.XPATH, self.textbox_email)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021E3A40D760>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...bol) [0x00007FF69E024A7F]\\\\n\\\\t(No symbol) [0x00007FFAF5027374]\\\\n\\\\tRtlUserThreadStart [0x00007FFAF5CBCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=128.0.6613.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF69E0BB632+29090]\nE       \t(No symbol) [0x00007FF69E02E6E9]\nE       \t(No symbol) [0x00007FF69DEEB1CA]\nE       \t(No symbol) [0x00007FF69DEBFAF5]\nE       \t(No symbol) [0x00007FF69DF6E2E7]\nE       \t(No symbol) [0x00007FF69DF85EE1]\nE       \t(No symbol) [0x00007FF69DF66493]\nE       \t(No symbol) [0x00007FF69DF309B1]\nE       \t(No symbol) [0x00007FF69DF31B11]\nE       \tGetHandleVerifier [0x00007FF69E3D883D+3294125]\nE       \tGetHandleVerifier [0x00007FF69E424423+3604371]\nE       \tGetHandleVerifier [0x00007FF69E41A2E7+3563095]\nE       \tGetHandleVerifier [0x00007FF69E176F16+797318]\nE       \t(No symbol) [0x00007FF69E03986F]\nE       \t(No symbol) [0x00007FF69E035454]\nE       \t(No symbol) [0x00007FF69E0355E0]\nE       \t(No symbol) [0x00007FF69E024A7F]\nE       \t(No symbol) [0x00007FFAF5027374]\nE       \tRtlUserThreadStart [0x00007FFAF5CBCC91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "c43073f9-02eb-4541-a19a-64c572fc2924-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup", "value": "'chrome'"}], "start": 1725229703864, "stop": 1725229703868, "uuid": "15f29b78-a42e-4dc3-b63a-3377c5c845a8", "historyId": "794bb5a0a1c796aeb5dd7066c0f2785b", "testCaseId": "f2b64ba14fad880b7fa63dad87fd7570", "fullName": "tests.test_add_candidate.Test_Add_Candidate#test_addcandidate", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "Sanity"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_candidate"}, {"name": "subSuite", "value": "Test_Add_Candidate"}, {"name": "host", "value": "CNXFCM5LHW3MGRL"}, {"name": "thread", "value": "24740-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_candidate"}]}